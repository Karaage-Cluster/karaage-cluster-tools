#!/usr/bin/env python3

# Copyright 2011 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import print_function

try:
    # Python 3
    import xmlrpc.client as xmlrpclib
except ImportError:
    # Python 2
    import xmlrpclib

import datetime
import sys
import os
import getopt

try:
    # Python 3
    import configparser
except ImportError:
    # Python 2
    import ConfigParser as configparser

import logging
import logging.config

logging.config.fileConfig("/etc/karaage3/logging.conf")
logger = logging.getLogger("pbs-logger")


def parse_logs(date, cfg):

    filename = date.strftime('%Y%m%d')

    try:
        f = open(os.path.join(cfg['LOG_DIR'], filename), 'r')
    except IOError:
        logger.warn(
            'Failed to open log file %s'
            % os.path.join(cfg['LOG_DIR'], filename))
        sys.exit(1)

    raw_data = f.readlines()
    f.close()
    data = []
    for d in raw_data:
        if d.find('resources_used.walltime') >= 0:
            data.append(d)

    if data:
        server = xmlrpclib.Server(cfg['WS_URL'])

        try:
            summary, output = server.parse_usage(
                cfg['WS_USERNAME'], cfg['WS_PASSWORD'],
                data, str(date), cfg['MACHINE_NAME'], 'PBS')
            logger.info(summary)

            for line in output:
                logger.error(line)
        except:
            response = server.parse_usage(
                cfg['WS_USERNAME'], cfg['WS_PASSWORD'],
                data, str(date), cfg['MACHINE_NAME'], 'PBS')
            logger.error(response)


def print_help():
    print('Usage:')
    print('')
    print('  -h  -  Print help')
    print('  -c  -  Configuration file Default: /etc/karaage3/pbs-logger.cfg')
    print('  -f  -  Specify log file eg. 20071225')
    print('  -y  -  proccess yesterdays log file')
    print('  -A  -  Read all log files')
    print('  -d  -  Print Debug information')
    print('')


def get_config(config_file):
    try:
        open(config_file)
    except IOError:
        logger.error("No configuration found at %s" % config_file)
        sys.exit(1)

    config = configparser.RawConfigParser()

    config.read(config_file)
    cfg = {}
    try:
        cfg['MACHINE_NAME'] = config.get('pbs-logger', 'machine_name')
        cfg['LOG_DIR'] = config.get('pbs-logger', 'log_dir')
        cfg['WS_URL'] = config.get('pbs-logger', 'ws_url')
        cfg['WS_USERNAME'] = config.get('pbs-logger', 'ws_username')
        cfg['WS_PASSWORD'] = config.get('pbs-logger', 'ws_password')
    except:
        logger.error("Failed to parse config")
        sys.exit(1)

    return cfg


if __name__ == "__main__":

    opts, args = getopt.getopt(sys.argv[1:], 'yc:Ahdf:')
    opts = dict(opts)

    if not opts or '-h' in opts:
        print_help()
        sys.exit(1)

    if '-c' in opts:
        config_file = opts['-c']
    else:
        config_file = '/etc/karaage3/pbs-logger.cfg'

    cfg = get_config(config_file)

    if '-d' in opts:
        logger.setLevel(logging.DEBUG)
        for handler in logger.handlers:
            handler.setLevel(logging.DEBUG)

    if '-A' in opts:
        file_list = os.listdir(cfg['LOG_DIR'])

        for filename in file_list:
            date = datetime.date(
                int(filename[:4]), int(filename[4:6]), int(filename[6:]))
            parse_logs(date, cfg)
        sys.exit(0)

    if '-f' in opts:
        filename = opts['-f']
        date = datetime.date(
            int(filename[:4]), int(filename[4:6]), int(filename[6:]))
    elif '-y' in opts:
        date = datetime.date.today() - datetime.timedelta(days=1)
    else:
        logger.error('You must specify either -f or -y')
        sys.exit(1)

    parse_logs(date, cfg)

    sys.exit(0)
