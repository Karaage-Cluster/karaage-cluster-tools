#!/usr/bin/env python3

# Copyright 2011 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import print_function

try:
    # Python 3
    import xmlrpc.client as xmlrpclib
except ImportError:
    # Python 2
    import xmlrpclib

import datetime
import sys
import os
import argparse

try:
    # Python 3
    import configparser
except ImportError:
    # Python 2
    import ConfigParser as configparser


class UsageError(Exception):
    pass


def parse_logs(filename, date, cfg):

    try:
        f = open(os.path.join(cfg['LOG_DIR'], filename), 'r')
    except IOError:
        raise UsageError(
            'Failed to open log file %s'
            % os.path.join(cfg['LOG_DIR'], filename))
    raw_data = f.readlines()
    f.close()

    data = []
    for d in raw_data:
        if cfg['TYPE'] == 'PBS' and d.find('resources_used.walltime') == -1:
            continue
        data.append(d)

    if len(data) > 0:
        server = xmlrpclib.Server(cfg['WS_URL'])

        summary, output = server.parse_usage(
            cfg['WS_USERNAME'], cfg['WS_PASSWORD'],
            data, str(date), cfg['MACHINE_NAME'], cfg['TYPE'])

        print(summary)
        for line in output:
            print(line)


def get_config(config_file):
    try:
        open(config_file)
    except IOError:
        raise UsageError("No configuration found at %s" % config_file)

    config = configparser.RawConfigParser()

    config.read(config_file)
    cfg = {}
    try:
        cfg['MACHINE_NAME'] = config.get('kg-send-usage', 'machine_name')
        cfg['TYPE'] = config.get('kg-send-usage', 'type')
        cfg['LOG_DIR'] = config.get('kg-send-usage', 'log_dir')

        cfg['WS_URL'] = config.get('karaage', 'url')
        cfg['WS_USERNAME'] = config.get('karaage', 'username')
        cfg['WS_PASSWORD'] = config.get('karaage', 'password')
    except:
        raise UsageError("Failed to parse config at %s" % config_file)

    return cfg


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Send usage logs to Karaage",
        epilog='Log files must be named YYYMMDD.')

    parser.add_argument(
        "--config", "-c",
        default="/etc/karaage3/karaage-cluster-tools.cfg",
        help='Configuration file')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--all", "-a", action="store_true",
        help="Read all log files.")
    group.add_argument(
        "--yesterday", "-y", action="store_true",
        help="Process yesterday's log file.")
    group.add_argument(
        "--filename", "-f",
        help="Log file to read.")

    args = parser.parse_args()

    config_file = args.config

    try:
        cfg = get_config(config_file)

        if args.all:
            file_list = os.listdir(cfg['LOG_DIR'])

            for filename in file_list:
                date = datetime.date(
                    int(filename[:4]), int(filename[4:6]), int(filename[6:]))
                parse_logs(filename, date, cfg)

        elif args.yesterday:
            date = datetime.date.today() - datetime.timedelta(days=1)
            filename = date.strftime('%Y%m%d')
            parse_logs(filename, date, cfg)

        elif args.filename:
            filename = args.filename
            date = datetime.date(
                int(filename[:4]), int(filename[4:6]), int(filename[6:]))
            parse_logs(filename, date, cfg)

        else:
            raise RuntimeError("oops. I mistake made.")

    except UsageError as e:
        print("Error: %s" % e, file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
